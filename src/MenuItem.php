<?php

namespace WPGraphQL\Extensions\Polylang;

use WPGraphQL\Data\Connection\MenuItemConnectionResolver;

class MenuItem
{
    /**
     * Convert menu location to match the one generated by Polylang
     *
     * Ex. TOP_MENU -> TOP_MENU___fi
     */
    static function translate_menu_location(
        string $location,
        string $language
    ): string {
        return "${location}___${language}";
    }

    function init()
    {
        $this->create_nav_menu_locations();

        add_action(
            'graphql_register_types',
            [$this, '__action_graphql_register_types'],
            10,
            0
        );

        add_filter(
            'graphql_connection_query_args',
            [$this, '__filter_graphql_menu_item_connection_args'],
            10,
            2
        );
    }

    function __filter_graphql_menu_item_connection_args(array $queryArgs, MenuItemConnectionResolver $resolver)
    {
        $args = $resolver->getArgs();

        if (!isset($args['where']['language'])) {
            return $queryArgs;
        }

        if (!isset($args['where']['location'])) {
            return $queryArgs;
        }

        // Required only when using other than the default language because the
        // menu location for the default language is the original location
        if (pll_default_language('slug') !== $args['where']['language']) {
            $menuLocations = get_theme_mod('nav_menu_locations', []);
            $locations = array_unique(array_values($menuLocations));
            $location = self::translate_menu_location($args['where']['location'], $args['where']['language']);

            // If the location argument is set, set the argument to the input argument
            if (isset($menuLocations[$location])) {
                $locations = [$menuLocations[$location]];
            }

            $queryArgs['tax_query'] = [
                [
                    [
                        'taxonomy'         => 'nav_menu',
                        'field'            => 'term_id',
                        'terms'            => $locations,
                        'include_children' => false,
                        'operator'         => 'IN',
                    ],
                ],
            ];
        }

        return $queryArgs;
    }

    /**
     * Nav menu locations are created on admin_init with PLL_Admin but GraphQL
     * requests do not call so we must manually call it
     */
    function create_nav_menu_locations()
    {
        // graphql_init is bit early. Delay to wp_loaded so the nav_menu object is avalable
        add_action(
            'wp_loaded',
            function () {
                global $polylang;

                if (
                    property_exists($polylang, 'nav_menu') &&
                    $polylang->nav_menu
                ) {
                    $polylang->nav_menu->create_nav_menu_locations();
                }
            },
            50
        );
    }

    function __action_graphql_register_types()
    {
        register_graphql_fields('RootQueryToMenuItemConnectionWhereArgs', [
            'language' => [
                'type'        => 'LanguageCodeFilterEnum',
                'description' => '',
            ],
        ]);
    }
}
